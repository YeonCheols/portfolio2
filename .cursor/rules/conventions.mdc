---
alwaysApply: true
---

## Cursor AI 규칙/컨벤션 가이드

이 문서는 Cursor 내 AI가 코드 수정을 수행할 때 따라야 할 팀 규칙/컨벤션을 요약합니다.

### 기본 원칙

- AI 응답은 항상 한국어로 작성합니다.
- 개발 서버는 자동 실행하지 않습니다(사용자가 직접 실행).
- 요청 범위 내 최소 변경을 지향하고, 관련 없는 리포매팅/리팩토링은 하지 않습니다.
- 기존 들여쓰기/공백/개행 스타일을 그대로 유지합니다.
- 불필요한 의존성 추가, 과한 추상화 지양. 기존 구조를 우선 존중.

### 기술 스택 컨텍스트

- Next.js 15, React 18, TypeScript(strict)
- Tailwind CSS 3.x, dark mode(class)
- Prettier 3.x(+ prettier-plugin-tailwindcss), ESLint extends "next"
- 경로 별칭: `@/*` → `src/*`, `@docs/*` → `docs/*`

### 코드 스타일(React/TS)

- 함수형 컴포넌트/유틸은 화살표 함수를 우선합니다.
- 공개 API(컴포넌트 props/서비스 함수)는 명시적 타입을 부여합니다.
- 가드 절과 early return을 선호하며, 중첩은 2~3 레벨 이내로 유지합니다.
- 의미 있는 에러 메시지로 처리하고 빈 catch 금지.
- 주석은 “왜(why)”를 설명하고, 자명한 코드에는 주석을 달지 않습니다.

### Tailwind

- 유틸리티 우선. 클래스 정렬은 prettier-plugin-tailwindcss에 위임(수동 재정렬 금지).
- 조건부 클래스 결합 시 `@/common/libs/cn` 사용.
- 다크 테마는 `class` 전략(`dark:` 프리픽스) 유지.

### Imports & 모듈 경계

- 그룹: 외부 → 별칭(@) → 상대경로.
- 미사용 import는 제거. 전역 side-effect import는 신중히.

### 파일/폴더 컨벤션

- 컴포넌트: PascalCase 파일명(예: `Button.tsx`)
- 훅: `useXxx.ts`
- 상수: `src/common/constant/*`
- 서비스/요청: `src/services/*` (공용 fetcher 활용 권장)
- 페이지: `src/pages/*` 라우팅 규칙 준수, 필요 시 `NextPage` 타입 사용

### 접근성/SEO

- 의미 있는 `alt`, role/aria 고려, 키보드 내비게이션 가능해야 함.
- 페이지 메타는 `NextSeo` 또는 기본 SEO 설정 활용.

### 품질 보증 & 스크립트

- 타입/빌드 오류 금지, 린트/포맷 통과 필수.
- 스크립트: `pnpm lint`, `pnpm lint:fix`, `pnpm format`, `pnpm format:check`, `pnpm type-check`, `pnpm test`.

### 커밋 컨벤션

- Conventional Commits: `<type>(<scope>): <subject>`
- type: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
- subject: 소문자 시작, 마침표 금지, 50자 이내. 본문/푸터는 72자 래핑 권장.

### 코드 예시

```tsx
import cn from "@/common/libs/cn";

type ButtonProps = {
  children: React.ReactNode;
  variant?: "primary" | "ghost";
};

export const Button = ({ children, variant = "primary" }: ButtonProps) => {
  return (
    <button
      className={cn(
        "inline-flex items-center justify-center rounded px-3 py-2 text-sm font-medium transition-colors",
        variant === "primary"
          ? "bg-neutral-900 text-neutral-50 hover:bg-neutral-800 dark:bg-neutral-100 dark:text-neutral-900"
          : "bg-transparent text-neutral-800 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-800"
      )}
      type="button"
    >
      {children}
    </button>
  );
};
```

### PR 체크리스트(요약)

- 타입/빌드 에러 없음
- 린트/포맷 통과
- 네이밍/파일 위치 규칙 준수
- 접근성/키보드 내비게이션 고려
- 사이드 이펙트 최소화(import, 전역 상태)

### 참고 파일

- `.eslintrc.json` / `tailwind.config.js`
- `src/common/styles/globals.css` / `src/common/styles/fonts.ts`
- `src/common/libs/cn.ts`
- `docs/COMMIT_CONVENTION.md` / `commitlint.config.js` / `scripts/validate-commit.js`

## Cursor AI 규칙/컨벤션 가이드

이 문서는 Cursor 내 AI가 코드 수정을 수행할 때 따라야 할 팀 규칙/컨벤션을 요약합니다.

### 기본 원칙

- AI 응답은 항상 한국어로 작성합니다.
- 개발 서버는 자동 실행하지 않습니다(사용자가 직접 실행).
- 요청 범위 내 최소 변경을 지향하고, 관련 없는 리포매팅/리팩토링은 하지 않습니다.
- 기존 들여쓰기/공백/개행 스타일을 그대로 유지합니다.
- 불필요한 의존성 추가, 과한 추상화 지양. 기존 구조를 우선 존중.

### 기술 스택 컨텍스트

- Next.js 15, React 18, TypeScript(strict)
- Tailwind CSS 3.x, dark mode(class)
- Prettier 3.x(+ prettier-plugin-tailwindcss), ESLint extends "next"
- 경로 별칭: `@/*` → `src/*`, `@docs/*` → `docs/*`

### 코드 스타일(React/TS)

- 함수형 컴포넌트/유틸은 화살표 함수를 우선합니다.
- 공개 API(컴포넌트 props/서비스 함수)는 명시적 타입을 부여합니다.
- 가드 절과 early return을 선호하며, 중첩은 2~3 레벨 이내로 유지합니다.
- 의미 있는 에러 메시지로 처리하고 빈 catch 금지.
- 주석은 “왜(why)”를 설명하고, 자명한 코드에는 주석을 달지 않습니다.

### Tailwind

- 유틸리티 우선. 클래스 정렬은 prettier-plugin-tailwindcss에 위임(수동 재정렬 금지).
- 조건부 클래스 결합 시 `@/common/libs/cn` 사용.
- 다크 테마는 `class` 전략(`dark:` 프리픽스) 유지.

### Imports & 모듈 경계

- 그룹: 외부 → 별칭(@) → 상대경로.
- 미사용 import는 제거. 전역 side-effect import는 신중히.

### 파일/폴더 컨벤션

- 컴포넌트: PascalCase 파일명(예: `Button.tsx`)
- 훅: `useXxx.ts`
- 상수: `src/common/constant/*`
- 서비스/요청: `src/services/*` (공용 fetcher 활용 권장)
- 페이지: `src/pages/*` 라우팅 규칙 준수, 필요 시 `NextPage` 타입 사용

### 접근성/SEO

- 의미 있는 `alt`, role/aria 고려, 키보드 내비게이션 가능해야 함.
- 페이지 메타는 `NextSeo` 또는 기본 SEO 설정 활용.

### 품질 보증 & 스크립트

- 타입/빌드 오류 금지, 린트/포맷 통과 필수.
- 스크립트: `pnpm lint`, `pnpm lint:fix`, `pnpm format`, `pnpm format:check`, `pnpm type-check`, `pnpm test`.

### 커밋 컨벤션

- Conventional Commits: `<type>(<scope>): <subject>`
- type: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
- subject: 소문자 시작, 마침표 금지, 50자 이내. 본문/푸터는 72자 래핑 권장.

### 코드 예시

```tsx
import cn from "@/common/libs/cn";

type ButtonProps = {
  children: React.ReactNode;
  variant?: "primary" | "ghost";
};

export const Button = ({ children, variant = "primary" }: ButtonProps) => {
  return (
    <button
      className={cn(
        "inline-flex items-center justify-center rounded px-3 py-2 text-sm font-medium transition-colors",
        variant === "primary"
          ? "bg-neutral-900 text-neutral-50 hover:bg-neutral-800 dark:bg-neutral-100 dark:text-neutral-900"
          : "bg-transparent text-neutral-800 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-800"
      )}
      type="button"
    >
      {children}
    </button>
  );
};
```

### PR 체크리스트(요약)

- 타입/빌드 에러 없음
- 린트/포맷 통과
- 네이밍/파일 위치 규칙 준수
- 접근성/키보드 내비게이션 고려
- 사이드 이펙트 최소화(import, 전역 상태)

### 참고 파일

- `.eslintrc.json` / `tailwind.config.js`
- `src/common/styles/globals.css` / `src/common/styles/fonts.ts`
- `src/common/libs/cn.ts`
- `docs/COMMIT_CONVENTION.md` / `commitlint.config.js` / `scripts/validate-commit.js`
