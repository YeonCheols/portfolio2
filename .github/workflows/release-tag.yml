name: tag release

on:
  push:
    branches:
      - master

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 태그까지 모두 받아오기

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: pnpm 설치
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: .npmrc 설정
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          echo "@yeoncheols:registry=https://npm.pkg.github.com" >> .npmrc

      - name: 의존성 설치
        run: |
          pnpm install --frozen-lockfile || pnpm install

      - name: Git 설정
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 커밋 메시지 검증 및 태그 생성
        id: tag_version
        run: |
                    # 머지 커밋을 건너뛰고 최근 커밋들에서 가장 높은 우선순위 타입 찾기
          HIGHEST_PRIORITY_TYPE=""
          COMMIT_MESSAGES=()
          
          # 최근 10개 커밋 확인
          for i in {1..10}; do
            MSG=$(git log -$i --pretty=%B | head -1)
            if [[ ! "$MSG" =~ ^(Merge|merge|MERGE) ]]; then
              COMMIT_TYPE=$(echo "$MSG" | sed -E 's/^([a-z]+).*/\1/')
              COMMIT_MESSAGES+=("$MSG")
              
              # 우선순위 결정 (feat > fix > perf > refactor > test > chore > docs > style > build > ci)
              case $COMMIT_TYPE in
                "feat")
                  HIGHEST_PRIORITY_TYPE="feat"
                  break  # feat가 최고 우선순위이므로 더 이상 확인할 필요 없음
                  ;;
                "fix")
                  if [[ "$HIGHEST_PRIORITY_TYPE" != "feat" ]]; then
                    HIGHEST_PRIORITY_TYPE="fix"
                  fi
                  ;;
                "perf")
                  if [[ "$HIGHEST_PRIORITY_TYPE" != "feat" && "$HIGHEST_PRIORITY_TYPE" != "fix" ]]; then
                    HIGHEST_PRIORITY_TYPE="perf"
                  fi
                  ;;
                "refactor")
                  if [[ "$HIGHEST_PRIORITY_TYPE" != "feat" && "$HIGHEST_PRIORITY_TYPE" != "fix" && "$HIGHEST_PRIORITY_TYPE" != "perf" ]]; then
                    HIGHEST_PRIORITY_TYPE="refactor"
                  fi
                  ;;
                "test")
                  if [[ "$HIGHEST_PRIORITY_TYPE" != "feat" && "$HIGHEST_PRIORITY_TYPE" != "fix" && "$HIGHEST_PRIORITY_TYPE" != "perf" && "$HIGHEST_PRIORITY_TYPE" != "refactor" ]]; then
                    HIGHEST_PRIORITY_TYPE="test"
                  fi
                  ;;
                "chore"|"docs"|"style"|"build"|"ci")
                  if [[ -z "$HIGHEST_PRIORITY_TYPE" ]]; then
                    HIGHEST_PRIORITY_TYPE="$COMMIT_TYPE"
                  fi
                  ;;
              esac
            fi
          done
          
          if [ -z "$HIGHEST_PRIORITY_TYPE" ]; then
            echo "No valid commit found in recent history"
            echo "new_tag=" >> $GITHUB_OUTPUT
            echo "changelog=No valid commit found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Debug: 최고 우선순위 타입 = $HIGHEST_PRIORITY_TYPE"
          echo "Debug: 커밋 메시지들 = ${COMMIT_MESSAGES[*]}"

          # 첫 번째 커밋 메시지로 검증 (검증은 여전히 필요)
          FIRST_COMMIT_MSG="${COMMIT_MESSAGES[0]}"
          echo "$FIRST_COMMIT_MSG" > /tmp/commit_msg.txt
          echo "Debug: 검증용 커밋 메시지 = '$FIRST_COMMIT_MSG'"

          # validate-commit.js로 커밋 메시지 검증
          node scripts/validate-commit.js /tmp/commit_msg.txt

          # 검증 통과 시 태그 생성
          if [ $? -eq 0 ]; then
            # 최신 원격 태그 가져오기
            git fetch --tags
            LATEST_TAG=$(git tag --sort=-version:refname | head -1)
            
            if [ -z "$LATEST_TAG" ]; then
              # 태그가 없으면 0.1.0부터 시작
              CURRENT_VERSION="0.1.0"
            else
              # 태그에서 버전 추출 (v0.4.1 -> 0.4.1)
              CURRENT_VERSION=${LATEST_TAG#v}
            fi
            
            echo "Debug: 현재 버전 = $CURRENT_VERSION"
            
            # 버전 증가 로직 (최고 우선순위 타입 사용)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case $HIGHEST_PRIORITY_TYPE in
              "feat")
                # 새로운 기능이면 minor 버전 증가
                NEW_MINOR=$((MINOR + 1))
                NEW_PATCH=0
                NEW_VERSION="$MAJOR.$NEW_MINOR.$NEW_PATCH"
                ;;
              "fix"|"perf"|"refactor"|"test")
                # 버그 수정, 성능 개선, 테스트면 patch 버전 증가
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
              *)
                # 기타 변경사항이면 patch 버전 증가
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
            esac
            
            # 새로운 태그 생성
            NEW_TAG="v$NEW_VERSION"
            
            # 태그가 이미 존재하는지 확인
            if git tag | grep -q "^$NEW_TAG$"; then
              echo "Tag $NEW_TAG already exists, using existing tag..."
              echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
              echo "changelog=Tag $NEW_TAG already exists" >> $GITHUB_OUTPUT
            else
              # package.json 버전 업데이트
              pnpm version $NEW_VERSION --no-git-tag-version
              
              # 변경사항 커밋
              git add package.json
              git commit -m "chore: bump version to $NEW_VERSION" || true
              
              # 태그 생성
              git tag $NEW_TAG
              git push origin $NEW_TAG
              git push origin master
              
              # 변경사항 로그 생성 (이전 태그부터 현재까지)
              PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              if [ -n "$PREV_TAG" ]; then
                CHANGELOG=$(git log --oneline $PREV_TAG..HEAD --pretty=format:"- %s")
              else
                CHANGELOG=$(git log --oneline --pretty=format:"- %s")
              fi
              
              echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
              echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
            fi
          else
            echo "Commit message validation failed, skipping tag creation"
            echo "new_tag=" >> $GITHUB_OUTPUT
            echo "changelog=Commit message validation failed" >> $GITHUB_OUTPUT
          fi

      - name: Release create
        if: steps.tag_version.outputs.new_tag != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
